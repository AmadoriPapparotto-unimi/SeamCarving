.TH "image_handler.cu" 3 "Thu Nov 4 2021" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
image_handler.cu
.SH SYNOPSIS
.br
.PP
\fC#include 'image_handler\&.h'\fP
.br
\fC#include 'seam_carving\&.h'\fP
.br
\fC#include 'utils\&.cuh'\fP
.br
\fC#include <windows\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include 'cuda_runtime\&.h'\fP
.br
\fC#include 'cuda_runtime_api\&.h'\fP
.br
\fC#include 'device_launch_parameters\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "__device__ void \fBgrayValue\fP (\fBenergyPixel_t\fP *energyPixel, \fBpel_t\fP r, \fBpel_t\fP g, \fBpel_t\fP b, int id)"
.br
.ti -1c
.RI "__global__ void \fBtoGrayScale_\fP (\fBpixel_t\fP *img, \fBenergyPixel_t\fP *imgGray, int imageSize)"
.br
.ti -1c
.RI "__global__ void \fBgenerateEnergyImg_\fP (\fBpixel_t\fP *imgSrc, \fBenergyPixel_t\fP *energyImg, \fBimgProp_t\fP *imgProp)"
.br
.ti -1c
.RI "__global__ void \fBenergy2pixel_\fP (\fBpixel_t\fP *imgSrc, \fBenergyPixel_t\fP *energyImg, \fBimgProp_t\fP *imgProp)"
.br
.ti -1c
.RI "__global__ void \fBcolorSeamToRemove_\fP (\fBpixel_t\fP *img, \fBseam_t\fP *seam, \fBimgProp_t\fP *imgProp)"
.br
.ti -1c
.RI "void \fBtoGrayScale\fP (\fBpixel_t\fP *img, \fBenergyPixel_t\fP *imgGray, \fBimgProp_t\fP *imgProp)"
.br
.ti -1c
.RI "void \fBsetupImgProp\fP (\fBimgProp_t\fP *imgProp, FILE *f)"
.br
.ti -1c
.RI "void \fBreadBMP\fP (FILE *f, \fBpixel_t\fP *img, \fBimgProp_t\fP *imgProp)"
.br
.ti -1c
.RI "void \fBwriteBMP_pixel\fP (char *p, \fBpixel_t\fP *img, \fBimgProp_t\fP *ip)"
.br
.ti -1c
.RI "void \fBwriteBMP_energy\fP (char *p, \fBenergyPixel_t\fP *energyImg, \fBimgProp_t\fP *imgProp)"
.br
.ti -1c
.RI "void \fBwriteBMP_grayscale\fP (\fBenergyPixel_t\fP *imgGray, \fBimgProp_t\fP *imgProp)"
.br
.ti -1c
.RI "void \fBwriteBMP_minimumSeam\fP (char *p, \fBpixel_t\fP *img, \fBseam_t\fP *minSeam, \fBimgProp_t\fP *imgProp)"
.br
.ti -1c
.RI "void \fBsetBMP_header\fP (\fBimgProp_t\fP *imgProp, int fileSize, int width)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "__global__ void colorSeamToRemove_ (\fBpixel_t\fP * img, \fBseam_t\fP * seam, \fBimgProp_t\fP * imgProp)"
Kernel GPU per colorare un seam dell'immagine 
.PP
\fBParameters\fP
.RS 4
\fIimg\fP Immagine (output)
.br
\fIseam\fP Seam da colorare (input)
.br
\fIimgProp\fP Proprieta' dell'immagine
.RE
.PP

.SS "__global__ void energy2pixel_ (\fBpixel_t\fP * imgSrc, \fBenergyPixel_t\fP * energyImg, \fBimgProp_t\fP * imgProp)"
Kernel di supporto non utilizzato nell'algoritmo\&. Serve per convertire una immagine di tipo energyPixel_t in una pixel_t\&. E' stata utilizzata per ottenere le immagini delle fasi intermedie dell'algoritmo 
.PP
\fBParameters\fP
.RS 4
\fIimgSrc\fP Immagine di output
.br
\fIenergyImg\fP Immagine input da convertire
.br
\fIimgProp\fP Proprietà della imamgine
.RE
.PP

.SS "__global__ void generateEnergyImg_ (\fBpixel_t\fP * imgSrc, \fBenergyPixel_t\fP * energyImg, \fBimgProp_t\fP * imgProp)"
Kernel GPU per generare una immagine di tipo pixel_t raffigurante la mappa di energia a partire dall'immagine in scala di grigi 
.PP
\fBParameters\fP
.RS 4
\fIimgSrc\fP Immagine (output)
.br
\fIenergyImg\fP Immagine con mappa di energia (input)
.br
\fIimgProp\fP Proprieta' dell'immagine
.RE
.PP

.SS "__device__ void grayValue (\fBenergyPixel_t\fP * energyPixel, \fBpel_t\fP r, \fBpel_t\fP g, \fBpel_t\fP b, int id)"
Funione GPU che si occupa di convertire l'immagine a colori in scala di grigi
.PP
\fBParameters\fP
.RS 4
\fIenergyPixel\fP L'immagine da convertire
.br
\fIr\fP Valore ROSSO del pixel id
.br
\fIg\fP Valore VERDE del pixel id
.br
\fIb\fP Valore BLUE del pixel id
.br
\fIid\fP Id del pixel da convertire
.RE
.PP

.SS "void readBMP (FILE * f, \fBpixel_t\fP * img, \fBimgProp_t\fP * imgProp)"
Legge un file BMP tenendo conto e conseguentemente scartando il padding all'interno di esso\&. Il formato BMP prevede l'inserimento di N byte a fine riga in modo tale che ogni indirizzo di inizio riga sia allineato mod 4 byte\&. 
.PP
\fBParameters\fP
.RS 4
\fIf\fP File BMP
.br
\fIimg\fP Immagine
.br
\fIimgProp\fP Proprieta' dell'immagine
.RE
.PP

.SS "void setBMP_header (\fBimgProp_t\fP * imgProp, int fileSize, int width)"
Setup dell'header di un file BMP per i seguenti parametri:
.IP "\(bu" 2
dimensione totale del file
.IP "\(bu" 2
altezza (in pixel) dell'immagine 
.PP
.PP
\fBParameters\fP
.RS 4
\fIimgProp\fP Proprieta' dell'immagine
.br
\fIfileSize\fP Dimensione (in byte) del file
.br
\fIwidth\fP Larghezza dell'immagine 
.RE
.PP

.SS "void setupImgProp (\fBimgProp_t\fP * imgProp, FILE * f)"
Funzione host che permette di estrapolare le proprietà dell'immagine di input mediante la lettura del suo header 
.PP
\fBParameters\fP
.RS 4
\fIimgProp\fP Output
.br
\fIf\fP File dell'immagine di input
.RE
.PP

.SS "void toGrayScale (\fBpixel_t\fP * img, \fBenergyPixel_t\fP * imgGray, \fBimgProp_t\fP * imgProp)"
Funzione host che richiama il kernel GPU per la colorazione in scala di grigi 
.PP
\fBParameters\fP
.RS 4
\fIimg\fP Immagine (input)
.br
\fIimgGray\fP Immagine in scala di grigi (output)
.br
\fIimgProp\fP Proprieta' dell'immagine
.RE
.PP

.SS "__global__ void toGrayScale_ (\fBpixel_t\fP * img, \fBenergyPixel_t\fP * imgGray, int imageSize)"
Kernel GPU per applicare il calcolo del grayscale su ogni pixel 
.PP
\fBParameters\fP
.RS 4
\fIimg\fP Immagine (input)
.br
\fIimgGray\fP Immagine in scala di grigi (output)
.br
\fIimageSize\fP Numero totale di pixel dell'immagine
.RE
.PP

.SS "void writeBMP_energy (char * p, \fBenergyPixel_t\fP * energyImg, \fBimgProp_t\fP * imgProp)"
Scrittura di un file BMP a partire da una immagine di tipo energyPixel_t\&. Funzione non utilizzata dall'algoritmo, ma necessaria ad ottenere le stampe intermedie 
.PP
\fBParameters\fP
.RS 4
\fIp\fP Path del file
.br
\fIenergyImg\fP Immagine energyPixel_t da scrivere
.br
\fIimgProp\fP Prorpieta' dell'immagine
.RE
.PP

.SS "void writeBMP_grayscale (\fBenergyPixel_t\fP * imgGray, \fBimgProp_t\fP * imgProp)"
Scrittura di un file BMP a partire da una immagine di tipo energyPixel_t (raffigurante l'immagine in scala di grigi)\&. Funzione non utilizzata dall'algoritmo, ma necessaria ad ottenere le stampe intermedie 
.PP
\fBParameters\fP
.RS 4
\fIimgGray\fP Immagine in scala di grigi
.br
\fIimgProp\fP Proprieta' dell'immagine
.RE
.PP

.SS "void writeBMP_minimumSeam (char * p, \fBpixel_t\fP * img, \fBseam_t\fP * minSeam, \fBimgProp_t\fP * imgProp)"
Scrittura di un file BMP con colorazione del minSeam\&. Funzione non utilizzata dall'algoritmo, ma necessaria ad ottenere le stampe intermedie 
.PP
\fBParameters\fP
.RS 4
\fIp\fP 
.br
\fIimg\fP 
.br
\fIminSeam\fP 
.br
\fIimgProp\fP 
.RE
.PP

.SS "void writeBMP_pixel (char * p, \fBpixel_t\fP * img, \fBimgProp_t\fP * ip)"
Scrittura di un file BMP, che tiene conto del numero di byte padding da aggiungere\&. 
.PP
\fBParameters\fP
.RS 4
\fIp\fP Path del file
.br
\fIimg\fP Immagine da scrivere
.br
\fIip\fP Proprieta' dell'immagine
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
