.TH "utils.cu" 3 "Thu Nov 4 2021" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
utils.cu
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include 'cuda_runtime\&.h'\fP
.br
\fC#include 'cuda_runtime_api\&.h'\fP
.br
\fC#include 'device_launch_parameters\&.h'\fP
.br
\fC#include 'image_handler\&.h'\fP
.br
\fC#include 'utils\&.cuh'\fP
.br
\fC#include 'seam_carving\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "__global__ void \fBmin_\fP (const \fBseam_t\fP *energiesArray, \fBseam_t\fP *outputArray, \fBimgProp_t\fP *imgProp, int nThreads)"
.br
.ti -1c
.RI "__global__ void \fBsum_\fP (\fBenergyPixel_t\fP *energyImg, \fBseam_t\fP *seam, int *out, \fBimgProp_t\fP *imgProp)"
.br
.ti -1c
.RI "void \fBreport_gpu_mem\fP ()"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "__global__ void min_ (const \fBseam_t\fP * energiesArray, \fBseam_t\fP * outputArray, \fBimgProp_t\fP * imgProp, int nThreads)"
Kernel GPU che permette di calcolare il seam minimo tra tutti quelli trovati\&. Sfrutta la shared memory e la parallel reduction, al fine di massimizzare le performance 
.PP
\fBParameters\fP
.RS 4
\fIenergiesArray\fP I vari seam di cui trovare il minimo
.br
\fIoutputArray\fP L'output del blocco
.br
\fIimgProp\fP Le caratteristiche dell'immagine
.br
\fInThreads\fP Il numero di thread nel blocco
.RE
.PP
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "void report_gpu_mem ()"
Funzione di supporto che permette di stampare la memoria GPU libera e occupata 
.SS "__global__ void sum_ (\fBenergyPixel_t\fP * energyImg, \fBseam_t\fP * seam, int * out, \fBimgProp_t\fP * imgProp)"
Non utilizzata, tentativo di parallelizzare la somma delle energie di un seam\&. Pocco efficiente nonostante la shared 
.PP
\fBParameters\fP
.RS 4
\fIenergyImg\fP 
.br
\fIseam\fP 
.br
\fIout\fP 
.br
\fIimgProp\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
