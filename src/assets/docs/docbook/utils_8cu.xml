<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_utils_8cu" xml:lang="en-US">
<title>utils.cu File Reference</title>
<indexterm><primary>utils.cu</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;stdlib.h&gt;
#include &lt;iostream&gt;
#include &quot;cuda_runtime.h&quot;
#include &quot;cuda_runtime_api.h&quot;
#include &quot;device_launch_parameters.h&quot;
#include &quot;image_handler.h&quot;
#include &quot;utils.cuh&quot;
#include &quot;seam_carving.h&quot;
</programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>__global__ void <link linkend="_utils_8cu_1a32fa945669a6ab3f94e435f91fc4e185">min_</link> (const <link linkend="_image__handler_8h_1afa036bc04d925ac554f8714304c2131b">seam_t</link> *energiesArray, <link linkend="_image__handler_8h_1afa036bc04d925ac554f8714304c2131b">seam_t</link> *outputArray, <link linkend="_image__handler_8h_1a3173789b5a5a8673b3025bd014732715">imgProp_t</link> *imgProp, int nThreads)</para>
</listitem>
            <listitem><para>__global__ void <link linkend="_utils_8cu_1a32b9c58ec26829357d27c2231246786b">sum_</link> (<link linkend="_image__handler_8h_1a6239917a28b62ca5e3c3cd981f41944c">energyPixel_t</link> *energyImg, <link linkend="_image__handler_8h_1afa036bc04d925ac554f8714304c2131b">seam_t</link> *seam, int *out, <link linkend="_image__handler_8h_1a3173789b5a5a8673b3025bd014732715">imgProp_t</link> *imgProp)</para>
</listitem>
            <listitem><para>void <link linkend="_utils_8cu_1a153a75fcad148c75d885f60f68036af9">report_gpu_mem</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_utils_8cu_1a32fa945669a6ab3f94e435f91fc4e185"/><section>
    <title>min_()</title>
<indexterm><primary>min_</primary><secondary>utils.cu</secondary></indexterm>
<indexterm><primary>utils.cu</primary><secondary>min_</secondary></indexterm>
<para><computeroutput>__global__ void min_ (const <link linkend="_image__handler_8h_1afa036bc04d925ac554f8714304c2131b">seam_t</link> * energiesArray, <link linkend="_image__handler_8h_1afa036bc04d925ac554f8714304c2131b">seam_t</link> * outputArray, <link linkend="_image__handler_8h_1a3173789b5a5a8673b3025bd014732715">imgProp_t</link> * imgProp, int nThreads)</computeroutput></para>
<para>Kernel GPU che permette di calcolare il seam minimo tra tutti quelli trovati. Sfrutta la shared memory e la parallel reduction, al fine di massimizzare le performance </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>energiesArray</entry><entry>
<para>I vari seam di cui trovare il minimo</para>
</entry>
                            </row>
                            <row>
<entry>outputArray</entry><entry>
<para>L&apos;output del blocco</para>
</entry>
                            </row>
                            <row>
<entry>imgProp</entry><entry>
<para>Le caratteristiche dell&apos;immagine</para>
</entry>
                            </row>
                            <row>
<entry>nThreads</entry><entry>
<para>Il numero di thread nel blocco</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>

<para><formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="_utils_8cu_1a153a75fcad148c75d885f60f68036af9"/><section>
    <title>report_gpu_mem()</title>
<indexterm><primary>report_gpu_mem</primary><secondary>utils.cu</secondary></indexterm>
<indexterm><primary>utils.cu</primary><secondary>report_gpu_mem</secondary></indexterm>
<para><computeroutput>void report_gpu_mem ( )</computeroutput></para>
<para>Funzione di supporto che permette di stampare la memoria GPU libera e occupata </para>
</section>
<anchor xml:id="_utils_8cu_1a32b9c58ec26829357d27c2231246786b"/><section>
    <title>sum_()</title>
<indexterm><primary>sum_</primary><secondary>utils.cu</secondary></indexterm>
<indexterm><primary>utils.cu</primary><secondary>sum_</secondary></indexterm>
<para><computeroutput>__global__ void sum_ (<link linkend="_image__handler_8h_1a6239917a28b62ca5e3c3cd981f41944c">energyPixel_t</link> * energyImg, <link linkend="_image__handler_8h_1afa036bc04d925ac554f8714304c2131b">seam_t</link> * seam, int * out, <link linkend="_image__handler_8h_1a3173789b5a5a8673b3025bd014732715">imgProp_t</link> * imgProp)</computeroutput></para>
<para>Non utilizzata, tentativo di parallelizzare la somma delle energie di un seam. Pocco efficiente nonostante la shared </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>energyImg</entry><entry></entry>
                            </row>
                            <row>
<entry>seam</entry><entry></entry>
                            </row>
                            <row>
<entry>out</entry><entry></entry>
                            </row>
                            <row>
<entry>imgProp</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
</section>
